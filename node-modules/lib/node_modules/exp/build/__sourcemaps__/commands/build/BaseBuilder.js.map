{"version":3,"sources":["commands/build/BaseBuilder.js"],"names":["BaseBuilder","projectDir","options","wait","clearCredentials","releaseChannel","publish","_checkProjectConfig","run","error","message","process","exit","readConfigJsonAsync","exp","isDetached","current","buildAsync","mode","buildStatus","err","Error","jobs","length","raw","forEach","platform","j","status","id","artifacts","url","ids","getLatestReleaseAsync","release","channel","publicationId","publishedTime","expIds","opts","type","buildResp","ipaUrl","apkUrl","buildErr","underline","constructBuildLogsUrl","buildId","env","EXPO_STAGING","EXPO_LOCAL"],"mappings":"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","file":"../../../commands/build/BaseBuilder.js","sourcesContent":["/**\n * @flow\n */\n\nimport { Project, ProjectUtils } from 'xdl';\nimport inquirer from 'inquirer';\n\nimport log from '../../log';\nimport chalk from 'chalk';\nimport { action as publishAction } from '../publish';\n\nimport BuildError from './BuildError';\n\ntype BuilderOptions = {\n  wait: boolean,\n  clearCredentials: boolean,\n  type?: string,\n  releaseChannel: string,\n  publish: boolean,\n};\n\nexport default class BaseBuilder {\n  projectDir: string = '';\n  options: BuilderOptions = {\n    wait: false,\n    clearCredentials: false,\n    releaseChannel: 'default',\n    publish: false,\n  };\n  run: () => Promise<void>;\n\n  constructor(projectDir: string, options: BuilderOptions) {\n    this.projectDir = projectDir;\n    this.options = options;\n  }\n\n  async command() {\n    try {\n      await this._checkProjectConfig();\n      await this.run();\n    } catch (e) {\n      if (!(e instanceof BuildError)) {\n        throw e;\n      } else {\n        log.error(e.message);\n        process.exit(1);\n      }\n    }\n  }\n\n  async _checkProjectConfig(): Promise<void> {\n    let { exp } = await ProjectUtils.readConfigJsonAsync(this.projectDir);\n    if (exp.isDetached) {\n      log.error(`\\`exp build\\` is not supported for detached projects.`);\n      process.exit(1);\n    }\n  }\n\n  async checkStatus(current: boolean = true): Promise<void> {\n    await this._checkProjectConfig();\n\n    log('Checking if current build exists...\\n');\n\n    const buildStatus = await Project.buildAsync(this.projectDir, {\n      mode: 'status',\n      current,\n    });\n\n    if (buildStatus.err) {\n      throw new Error('Error getting current build status for this project.');\n    }\n\n    if (buildStatus.jobs && buildStatus.jobs.length) {\n      log.raw();\n      log('============');\n      log('Build Status');\n      log('============\\n');\n      buildStatus.jobs.forEach(j => {\n        let platform;\n        if (j.platform === 'ios') {\n          platform = 'iOS';\n        } else {\n          platform = 'Android';\n        }\n\n        let status;\n        switch (j.status) {\n          case 'pending':\n            status = 'Build waiting in queue...';\n            break;\n          case 'started':\n            status = 'Build started...';\n            break;\n          case 'in-progress':\n            status = 'Build in progress...';\n            break;\n          case 'finished':\n            status = 'Build finished.';\n            break;\n          case 'errored':\n            status = 'There was an error with this build.';\n            if (buildStatus.id) {\n              status += `\n\nWhen requesting support, please provide this build ID:\n\n${buildStatus.id}\n`;\n            }\n            break;\n          default:\n            status = '';\n            break;\n        }\n\n        if (j.status !== 'finished') {\n          log(`${platform}: ${status}`);\n        } else {\n          log(`${platform}:`);\n          switch (j.platform) {\n            case 'ios':\n              if (!j.artifacts) {\n                log(`Problem getting IPA URL. Please try build again.`);\n                break;\n              }\n              log(`IPA: ${j.artifacts.url}\\n`);\n              break;\n            case 'android':\n              if (!j.artifacts) {\n                log(`Problem getting APK URL. Please try build again.`);\n                break;\n              }\n              log(`APK: ${j.artifacts.url}\\n`);\n              break;\n          }\n        }\n      });\n\n      throw new BuildError('Cannot start new build, as there is a build in progress.');\n    }\n\n    log('No currently active or previous builds for this project.');\n  }\n\n  async ensureReleaseExists(platform: string) {\n    if (this.options.publish) {\n      const { ids, url, err } = await publishAction(this.projectDir, {\n        releaseChannel: this.options.releaseChannel,\n        platform,\n      });\n      if (err) {\n        throw new BuildError(`No url was returned from publish. Please try again.\\n${err}`);\n      } else if (!url || url === '') {\n        throw new BuildError('No url was returned from publish. Please try again.');\n      }\n      return ids;\n    } else {\n      log('Looking for releases...');\n      const release = await Project.getLatestReleaseAsync(this.projectDir, {\n        releaseChannel: this.options.releaseChannel,\n        platform,\n      });\n      if (!release) {\n        throw new BuildError('No releases found. Please create one using `exp publish` first.');\n      }\n      log(\n        `Using existing release on channel \"${release.channel}\":\\n  publicationId: ${release.publicationId}\\n  publishedTime: ${release.publishedTime}`\n      );\n      return [release.publicationId];\n    }\n  }\n\n  async build(expIds: Array<string>, platform: string) {\n    log('Building...');\n\n    let opts = {\n      mode: 'create',\n      expIds,\n      platform,\n      releaseChannel: this.options.releaseChannel,\n    };\n\n    if (platform === 'ios') {\n      opts = {\n        ...opts,\n        type: this.options.type,\n      };\n    }\n\n    // call out to build api here with url\n    const buildResp = await Project.buildAsync(this.projectDir, opts);\n\n    if (this.options.wait) {\n      const { ipaUrl, apkUrl, buildErr } = buildResp;\n      // do some stuff here\n      // FIXME(perry) this is duplicate code to the checkStatus function\n      if (buildErr) {\n        throw new BuildError(`Build failed with error.\\n${buildErr}`);\n      } else if (!ipaUrl || ipaUrl === '' || !apkUrl || apkUrl === '') {\n        throw new BuildError('No url was returned from the build process. Please try again.');\n      }\n\n      log(`IPA Url: ${ipaUrl}`);\n      log(`APK Url: ${apkUrl}`);\n\n      log('Successfully built standalone app!');\n    } else {\n      log('Build started, it may take a few minutes to complete.');\n\n      if (buildResp.id) {\n        log(\n          `You can monitor the build at\\n\\n ${chalk.underline(\n            constructBuildLogsUrl(buildResp.id)\n          )}\\n`\n        );\n      }\n\n      log('Alternatively, run `exp build:status` to monitor it from the command line.');\n    }\n  }\n}\n\nfunction constructBuildLogsUrl(buildId: string): string {\n  if (process.env.EXPO_STAGING) {\n    return `https://staging.expo.io/builds/${buildId}`;\n  } else if (process.env.EXPO_LOCAL) {\n    return `http://expo.dev/builds/${buildId}`;\n  } else {\n    return `https://expo.io/builds/${buildId}`;\n  }\n}\n"],"sourceRoot":"/Users/Edgar/universe/dev/exp/src"}