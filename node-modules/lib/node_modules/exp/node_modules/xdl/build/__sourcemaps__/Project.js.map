{"version":3,"sources":["Project.js"],"names":["async","projectDir","manifestUrl","await","UrlUtils","constructManifestUrlAsync","urlType","packagerUrl","constructBundleUrlAsync","let","packagerRunning","res","request","statusCode","body","includes","e","manifestServerRunning","currentStatus","projectRoot","packagerInfo","ProjectSettings","readPackagerInfoAsync","packagerNgrokUrl","expoServerNgrokUrl","status","_areTunnelsHealthy","projectSettings","readAsync","hostType","Config","offline","url","isUrlFallback","getManifestUrlWithFallbackAsync","ErrorCode","NO_PROJECT_ROOT","_assertValidProjectRoot","rangeStart","port","freeportAsync","NO_PORT_FOUND","_getFreePortAsync","platform","errorCode","minLength","getPlatformSpecificBundleUrl","fullUrl","response","get","headers","JSON","parse","ProjectUtils","logError","undefined","message","length","_getForPlatformAsync","manifest","resolver","strict","assetSchemas","ExpSchema","getAssetSchemasAsync","sdkVersion","filter","fieldPath","_","urls","Promise","all","map","pathOrURL","match","fs","existsSync","path","resolve","err","Error","localAssetPath","manifestField","forEach","index","set","logMethod","logWarning","_resolveManifestAssets","options","exp","pkg","readConfigJsonAsync","configName","configFilenameAsync","NO_PACKAGE_JSON","slug","name","INVALID_MANIFEST","getSlugAsync","formData","append","releaseChannel","queryResult","Api","callMethodAsync","getLatestReleaseAsync","user","UserManager","ensureLoggedInAsync","_validatePackagerReadyAsync","Analytics","logEvent","validationStatus","Doctor","validateWithNetworkAsync","ERROR","FATAL","PUBLISH_VALIDATION_ERROR","_getPublishExpConfigAsync","hooks","validPostPublishHooks","postPublish","hook","file","config","fn","_requireFromProject","logger","global","error","_fn","push","HOOK_INITIALIZATION_ERROR","iosBundle","androidBundle","_buildPublishBundlesAsync","_fetchAndUploadAssetsAsync","iosSourceMap","androidSourceMap","_maybeBuildSourceMapsAsync","force","_uploadArtifactsAsync","serverError","Sentry","captureException","_maybeWriteArtifactsToDiskAsync","ios","publishManifestPath","android","androidManifest","iosManifest","ExponentTools","getManifestAsync","hookOptions","log","msg","info","quiet","result","then","warn","stack","_writeArtifactSafelyAsync","stringify","isKernel","_handleKernelPublishedAsync","publishAsync","_createBlob","packagerPort","NO_PACKAGER_PORT","schema","joi","object","keys","string","joiValidateAsync","INVALID_OPTIONS","toString","version","process","env","entryPoint","Exp","determineEntryPointAsync","publishUrl","constructPublishUrlAsync","INVALID_BUNDLE","MINIMUM_BUNDLE_SIZE","sourceMapUrl","constructSourceMapUrlAsync","assetsUrl","constructAssetsUrlAsync","iosAssetsJson","INVALID_ASSETS","androidAssetsJson","manifestAssets","assetPath","absolutePath","contents","readFile","hash","md5hex","files","fileHashes","iosAssets","androidAssets","assets","concat","uploadAssetsAsync","assetBundlePatterns","fullPatterns","p","join","bundledAssets","Set","asset","__packager_asset","some","minimatch","add","type","keyName","artifactPath","artifact","pathToWrite","dirname","writeFile","publishBundlePath","publishSourceMapPath","kernelBundleUrl","api","scheme","host","username","kernel","androidManifestPath","bundleUrl","iosManifestPath","paths","metas","Object","metadata","missing","key","exists","chunk","logDebug","relativePath","replace","_readFileForUpload","isNode","createReadStream","data","Blob","current","boolean","mode","any","valid","expIds","array","regex","configPrefix","bundleIdentifier","package","buildAsync","delayAsync","_waitForRunningAsync","spawnAsync","stdout","logInfo","_restartWatchmanAsync","verbose","stopReactNativeServerAsync","Watchman","addToPathAsync","unblockAndGetVersionAsync","nodeModulesPath","packagerOpts","customLogReporterPath","assetExts","nonPersistent","Versions","gteSdkVersion","userPackagerOpts","uniq","cliOpts","reduce","opts","val","reset","defaultCliPath","cliPath","nodePath","rnCliPath","_nodePathForProjectRoot","packagerProcess","child_process","fork","cwd","REACT_NATIVE_APP_ROOT","NODE_PATH","ELECTRON_RUN_AS_NODE","silent","setPackagerInfoAsync","packagerPid","pid","on","treekill","setEncoding","stderr","pipe","split","_logPackagerOutput","code","startReactNativeServerAsync","treekillAsync","stopExpoServerAsync","app","express","use","bodyParser","json","limit","urlencoded","extended","manifestHandler","req","getPackagerOptsAsync","bundleUrlPackagerOpts","xde","developer","tool","developerTool","startsWith","mainModuleName","guessMainModulePath","queryParams","constructBundleQueryParamsAsync","hostname","debuggerHost","constructDebuggerHostAsync","logUrl","constructLogUrlAsync","hostUUID","UserSettings","anonymousIdentifier","id","manifestString","currentUser","getCurrentUserAsync","_cachedSignedManifest","signedManifest","unsignedManifest","signature","publishInfo","getPublishInfoAsync","args","hostInfo","server","serverVersion","require","serverDriver","serverOS","os","serverOSVersion","release","send","post","deviceId","deviceName","_handleDeviceLogs","close","expRc","readExpRcAsync","expoServerPort","manifestPort","listen","address","saveRecentExpRootAsync","startExpoServerAsync","hostnameAsync","ngrokPid","attempts","configPath","dotExpoHomeDirectory","ngrokConnectAsync","NGROK_ERROR","error_code","kill","ngrokKillAsync","resetProjectRandomnessAsync","_connectToNgrokAsync","NO_EXPO_SERVER_PORT","stopTunnelsAsync","Android","startAdbReverseAsync","clearNotification","packageShortName","base","ngrok","addListener","startedTunnelsSuccessfully","race","TUNNEL_TIMEOUT","authtoken","authToken","proto","randomness","manifestTunnelRandomness","getProjectRandomnessAsync","domainify","domain","startTunnelsAsync","ngrokProcess","ngrokProcessPid","removeAllListeners","stopAdbReverseAsync","number","integer","setOptionsAsync","getUrlAsync","startAsync","_stopInternalAsync","reject","setTimeout","stopAsync","promisify","validate","connect","Request","defaults","resolveWithFullResponse","modulePath","indexOf","fullPath","decache","_stripPackagerOutputBox","output","re","found","_processPackagerLine","line","timestampRe","sdk11AndUpTimestampRe","_parseModuleResolutionError","errorMessage","parts","moduleName","trim","NODE_STDLIB_MODULES","_logModuleResolutionError","DOCS_PAGE_URL","level","isPlatformSupported","_isIgnorableDuplicateModuleWarning","lines","i","reactNativeNodeModulesPath","reactNativeNodeModulesPattern","escapeRegExp","reactNativeNodeModulesCollisionRegex","RegExp","test","logs","obj","groupDepth","shouldHide","includesStack","logWithLevel","tag","directory","parentDirectory","delimiter"],"mappings":"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","file":"../Project.js","sourcesContent":["/**\n * @flow\n */\n\nimport bodyParser from 'body-parser';\nimport child_process from 'child_process';\nimport delayAsync from 'delay-async';\nimport decache from 'decache';\nimport express from 'express';\nimport freeportAsync from 'freeport-async';\nimport fs from 'fs-extra';\nimport joi from 'joi';\nimport promisify from 'util.promisify';\nimport _ from 'lodash';\nimport isEmpty from 'lodash/isEmpty';\nimport minimatch from 'minimatch';\nimport ngrok from '@expo/ngrok';\nimport os from 'os';\nimport path from 'path';\nimport Request from 'request-promise-native';\nimport spawnAsync from '@expo/spawn-async';\nimport split from 'split';\nimport treekill from 'tree-kill';\nimport md5hex from 'md5hex';\n\nimport * as Analytics from './Analytics';\nimport * as Android from './Android';\nimport Api from './Api';\nimport Config from './Config';\nimport * as Doctor from './project/Doctor';\nimport ErrorCode from './ErrorCode';\nimport logger from './Logger';\nimport * as ExponentTools from './detach/ExponentTools';\nimport * as Exp from './Exp';\nimport * as ExpSchema from './project/ExpSchema';\nimport FormData from './tools/FormData';\nimport { isNode } from './tools/EnvironmentHelper';\nimport * as ProjectSettings from './ProjectSettings';\nimport * as ProjectUtils from './project/ProjectUtils';\nimport * as Sentry from './Sentry';\nimport * as UrlUtils from './UrlUtils';\nimport UserManager from './User';\nimport UserSettings from './UserSettings';\nimport * as Versions from './Versions';\nimport * as Watchman from './Watchman';\nimport XDLError from './XDLError';\n\nimport type { User as ExpUser } from './User'; //eslint-disable-line\n\nconst MINIMUM_BUNDLE_SIZE = 500;\nconst TUNNEL_TIMEOUT = 10 * 1000;\n\nconst joiValidateAsync = promisify(joi.validate);\nconst treekillAsync = promisify(treekill);\nconst ngrokConnectAsync = promisify(ngrok.connect);\nconst ngrokKillAsync = promisify(ngrok.kill);\n\nconst request = Request.defaults({\n  resolveWithFullResponse: true,\n});\n\ntype CachedSignedManifest = {\n  manifestString: ?string,\n  signedManifest: ?string,\n};\n\nlet _cachedSignedManifest: CachedSignedManifest = {\n  manifestString: null,\n  signedManifest: null,\n};\n\nexport type ProjectStatus = 'running' | 'ill' | 'exited';\n\nexport async function currentStatus(projectDir: string): Promise<ProjectStatus> {\n  const manifestUrl = await UrlUtils.constructManifestUrlAsync(projectDir, {\n    urlType: 'http',\n  });\n  const packagerUrl = await UrlUtils.constructBundleUrlAsync(projectDir, {\n    urlType: 'http',\n  });\n\n  let packagerRunning = false;\n  try {\n    const res = await request(`${packagerUrl}/status`);\n\n    if (res.statusCode < 400 && res.body && res.body.includes('packager-status:running')) {\n      packagerRunning = true;\n    }\n  } catch (e) {}\n\n  let manifestServerRunning = false;\n  try {\n    const res = await request(manifestUrl);\n    if (res.statusCode < 400) {\n      manifestServerRunning = true;\n    }\n  } catch (e) {}\n\n  if (packagerRunning && manifestServerRunning) {\n    return 'running';\n  } else if (packagerRunning || manifestServerRunning) {\n    return 'ill';\n  } else {\n    return 'exited';\n  }\n}\n\nasync function _areTunnelsHealthy(projectRoot: string) {\n  const packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  if (!packagerInfo.packagerNgrokUrl || !packagerInfo.expoServerNgrokUrl) {\n    return false;\n  }\n  const status = await currentStatus(projectRoot);\n  return status === 'running';\n}\n\nexport async function getManifestUrlWithFallbackAsync(projectRoot: string) {\n  const projectSettings = await ProjectSettings.readAsync(projectRoot);\n  if (\n    projectSettings.hostType === 'tunnel' &&\n    !Config.offline &&\n    !await _areTunnelsHealthy(projectRoot)\n  ) {\n    // Fall back to LAN URL if tunnels are not available.\n    return {\n      url: await UrlUtils.constructManifestUrlAsync(projectRoot, {\n        hostType: 'lan',\n      }),\n      isUrlFallback: true,\n    };\n  } else {\n    return {\n      url: await UrlUtils.constructManifestUrlAsync(projectRoot),\n      isUrlFallback: false,\n    };\n  }\n}\n\nasync function _assertValidProjectRoot(projectRoot) {\n  if (!projectRoot) {\n    throw new XDLError(ErrorCode.NO_PROJECT_ROOT, 'No project root specified');\n  }\n}\n\nasync function _getFreePortAsync(rangeStart) {\n  let port = await freeportAsync(rangeStart);\n  if (!port) {\n    throw new XDLError(ErrorCode.NO_PORT_FOUND, 'No available port found');\n  }\n\n  return port;\n}\n\nasync function _getForPlatformAsync(projectRoot, url, platform, { errorCode, minLength }) {\n  url = UrlUtils.getPlatformSpecificBundleUrl(url, platform);\n\n  let fullUrl = `${url}&platform=${platform}`;\n  let response = await request.get({\n    url: fullUrl,\n    headers: {\n      'Exponent-Platform': platform,\n    },\n  });\n\n  if (response.statusCode !== 200) {\n    if (response.body) {\n      let body;\n      try {\n        body = JSON.parse(response.body);\n      } catch (e) {\n        ProjectUtils.logError(projectRoot, 'expo', response.body);\n      }\n\n      if (body !== undefined) {\n        if (body.message) {\n          ProjectUtils.logError(projectRoot, 'expo', body.message);\n        } else {\n          ProjectUtils.logError(projectRoot, 'expo', response.body);\n        }\n      }\n    }\n    throw new XDLError(\n      errorCode,\n      `Packager URL ${fullUrl} returned unexpected code ${response.statusCode}. Please open your project in the Expo app and see if there are any errors. Also scroll up and make sure there were no errors or warnings when opening your project.`\n    );\n  }\n\n  if (!response.body || (minLength && response.body.length < minLength)) {\n    throw new XDLError(errorCode, `Body is: ${response.body}`);\n  }\n\n  return response.body;\n}\n\nasync function _resolveManifestAssets(projectRoot, manifest, resolver, strict = false) {\n  try {\n    // Asset fields that the user has set\n    const assetSchemas = (await ExpSchema.getAssetSchemasAsync(\n      manifest.sdkVersion\n    )).filter(({ fieldPath }) => _.get(manifest, fieldPath));\n\n    // Get the URLs\n    const urls = await Promise.all(\n      assetSchemas.map(async ({ fieldPath }) => {\n        const pathOrURL = _.get(manifest, fieldPath);\n        if (pathOrURL.match(/^https?:\\/\\/(.*)$/)) {\n          // It's a remote URL\n          return pathOrURL;\n        } else if (fs.existsSync(path.resolve(projectRoot, pathOrURL))) {\n          return await resolver(pathOrURL);\n        } else {\n          const err = new Error('Could not resolve local asset.');\n          // $FlowFixMe\n          err.localAssetPath = pathOrURL;\n          // $FlowFixMe\n          err.manifestField = fieldPath;\n          throw err;\n        }\n      })\n    );\n\n    // Set the corresponding URL fields\n    assetSchemas.forEach(({ fieldPath }, index) => _.set(manifest, fieldPath + 'Url', urls[index]));\n  } catch (e) {\n    let logMethod = ProjectUtils.logWarning;\n    if (strict) {\n      logMethod = ProjectUtils.logError;\n    }\n    if (e.localAssetPath) {\n      logMethod(\n        projectRoot,\n        'expo',\n        `Unable to resolve asset \"${e.localAssetPath}\" from \"${e.manifestField}\" in your app/exp.json.`\n      );\n    } else {\n      logMethod(\n        projectRoot,\n        'expo',\n        `Warning: Unable to resolve manifest assets. Icons might not work. ${e.message}.`\n      );\n    }\n\n    if (strict) {\n      throw new Error('Resolving assets failed.');\n    }\n  }\n}\n\nfunction _requireFromProject(modulePath, projectRoot) {\n  try {\n    if (modulePath.indexOf('.') === 0) {\n      let fullPath = path.resolve(projectRoot, modulePath);\n\n      // Clear the require cache for this module so get a fresh version of it\n      // without requiring the user to restart XDE\n      decache(fullPath);\n\n      // $FlowIssue: doesn't work with dynamic requires\n      return require(fullPath);\n    } else {\n      let fullPath = path.resolve(projectRoot, 'node_modules', modulePath);\n\n      // Clear the require cache for this module so get a fresh version of it\n      // without requiring the user to restart XDE\n      decache(fullPath);\n\n      // $FlowIssue: doesn't work with dynamic requires\n      return require(fullPath);\n    }\n  } catch (e) {\n    return null;\n  }\n}\n\nexport async function getSlugAsync(projectRoot: string, options: Object = {}) {\n  // Verify that exp/app.json exist\n  let { exp, pkg } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n  if (!exp || !pkg) {\n    const configName = await ProjectUtils.configFilenameAsync(projectRoot);\n    throw new XDLError(\n      ErrorCode.NO_PACKAGE_JSON,\n      `Couldn't read ${configName} file in project at ${projectRoot}`\n    );\n  }\n\n  if (!exp.slug && pkg.name) {\n    exp.slug = pkg.name;\n  } else if (!exp.slug) {\n    const configName = await ProjectUtils.configFilenameAsync(projectRoot);\n    throw new XDLError(\n      ErrorCode.INVALID_MANIFEST,\n      `${configName} in ${projectRoot} must contain the slug field`\n    );\n  }\n  return exp.slug;\n}\n\nexport async function getLatestReleaseAsync(\n  projectRoot: string,\n  options: {\n    releaseChannel: string,\n    platform: string,\n  }\n) {\n  // TODO(ville): move request from multipart/form-data to JSON once supported by the endpoint.\n  let formData = new FormData();\n  formData.append('queryType', 'history');\n  formData.append('slug', await getSlugAsync(projectRoot));\n  formData.append('version', '2');\n  formData.append('count', '1');\n  formData.append('releaseChannel', options.releaseChannel);\n  formData.append('platform', options.platform);\n  const { queryResult } = await Api.callMethodAsync('publishInfo', [], 'post', null, {\n    formData,\n  });\n  if (queryResult && queryResult.length > 0) {\n    return queryResult[0];\n  } else {\n    return null;\n  }\n}\n\nexport async function publishAsync(\n  projectRoot: string,\n  options: Object = {}\n): Promise<{ url: string, ids: string[], err: ?string }> {\n  const user = await UserManager.ensureLoggedInAsync();\n  await _validatePackagerReadyAsync(projectRoot);\n  Analytics.logEvent('Publish', { projectRoot });\n\n  const validationStatus = await Doctor.validateWithNetworkAsync(projectRoot);\n  if (validationStatus == Doctor.ERROR || validationStatus === Doctor.FATAL) {\n    throw new XDLError(\n      ErrorCode.PUBLISH_VALIDATION_ERROR,\n      \"Couldn't publish because errors were found. (See logs above.) Please fix the errors and try again.\"\n    );\n  }\n\n  // Get project config\n  let exp = await _getPublishExpConfigAsync(projectRoot, options);\n\n  // TODO: refactor this out to a function, throw error if length doesn't match\n  let { hooks } = exp;\n  delete exp.hooks;\n  let validPostPublishHooks = [];\n  if (hooks && hooks.postPublish) {\n    hooks.postPublish.forEach(hook => {\n      let { file, config } = hook;\n      let fn = _requireFromProject(file, projectRoot);\n      if (fn === null) {\n        logger.global.error(`Unable to load postPublishHook: '${file}'`);\n      } else {\n        hook._fn = fn;\n        validPostPublishHooks.push(hook);\n      }\n    });\n\n    if (validPostPublishHooks.length !== hooks.postPublish.length) {\n      logger.global.error();\n\n      throw new XDLError(\n        ErrorCode.HOOK_INITIALIZATION_ERROR,\n        'Please fix your postPublish hook configuration.'\n      );\n    }\n  }\n\n  let { iosBundle, androidBundle } = await _buildPublishBundlesAsync(projectRoot);\n\n  await _fetchAndUploadAssetsAsync(projectRoot, exp);\n\n  let { iosSourceMap, androidSourceMap } = await _maybeBuildSourceMapsAsync(projectRoot, exp, {\n    force: validPostPublishHooks.length,\n  });\n\n  let response;\n  try {\n    response = await _uploadArtifactsAsync({\n      exp,\n      iosBundle,\n      androidBundle,\n      options,\n    });\n  } catch (e) {\n    if (e.serverError === 'SCHEMA_VALIDATION_ERROR') {\n      throw new Error(\n        `There was an error validating your project schema. Check for any warnings about the contents of your app/exp.json.`\n      );\n    }\n    Sentry.captureException(e);\n    throw e;\n  }\n\n  await _maybeWriteArtifactsToDiskAsync({\n    exp,\n    projectRoot,\n    iosBundle,\n    androidBundle,\n    iosSourceMap,\n    androidSourceMap,\n  });\n\n  if (\n    validPostPublishHooks.length ||\n    (exp.ios && exp.ios.publishManifestPath) ||\n    (exp.android && exp.android.publishManifestPath)\n  ) {\n    let [androidManifest, iosManifest] = await Promise.all([\n      ExponentTools.getManifestAsync(response.url, {\n        'Exponent-SDK-Version': exp.sdkVersion,\n        'Exponent-Platform': 'android',\n        'Expo-Release-Channel': options.releaseChannel,\n      }),\n      ExponentTools.getManifestAsync(response.url, {\n        'Exponent-SDK-Version': exp.sdkVersion,\n        'Exponent-Platform': 'ios',\n        'Expo-Release-Channel': options.releaseChannel,\n      }),\n    ]);\n\n    const hookOptions = {\n      url: response.url,\n      exp,\n      iosBundle,\n      iosSourceMap,\n      iosManifest,\n      androidBundle,\n      androidSourceMap,\n      androidManifest,\n      projectRoot,\n      log: msg => {\n        logger.global.info({ quiet: true }, msg);\n      },\n    };\n\n    for (let hook of validPostPublishHooks) {\n      logger.global.info(`Running postPublish hook: ${hook.file}`);\n      try {\n        let result = hook._fn({\n          config: hook.config,\n          ...hookOptions,\n        });\n\n        // If it's a promise, wait for it to resolve\n        if (result && result.then) {\n          result = await result;\n        }\n\n        if (result) {\n          logger.global.info({ quiet: true }, result);\n        }\n      } catch (e) {\n        logger.global.warn(`Warning: postPublish hook '${hook.file}' failed: ${e.stack}`);\n      }\n    }\n\n    if (exp.ios && exp.ios.publishManifestPath) {\n      await _writeArtifactSafelyAsync(\n        projectRoot,\n        'ios.publishManifestPath',\n        exp.ios.publishManifestPath,\n        JSON.stringify(iosManifest)\n      );\n    }\n\n    if (exp.android && exp.android.publishManifestPath) {\n      await _writeArtifactSafelyAsync(\n        projectRoot,\n        'android.publishManifestPath',\n        exp.android.publishManifestPath,\n        JSON.stringify(androidManifest)\n      );\n    }\n  }\n\n  // TODO: move to postPublish hook\n  if (exp.isKernel) {\n    await _handleKernelPublishedAsync({\n      user,\n      exp,\n      projectRoot,\n      url: response.url,\n    });\n  }\n\n  return response;\n}\n\nasync function _uploadArtifactsAsync({ exp, iosBundle, androidBundle, options }) {\n  logger.global.info('Uploading JavaScript bundles');\n  let formData = new FormData();\n\n  formData.append('expJson', JSON.stringify(exp));\n  formData.append('iosBundle', _createBlob(iosBundle), 'iosBundle');\n  formData.append('androidBundle', _createBlob(androidBundle), 'androidBundle');\n  formData.append('options', JSON.stringify(options));\n  let response = await Api.callMethodAsync('publish', null, 'put', null, {\n    formData,\n  });\n  return response;\n}\n\nasync function _validatePackagerReadyAsync(projectRoot) {\n  _assertValidProjectRoot(projectRoot);\n\n  // Ensure the packager is started\n  let packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  if (!packagerInfo.packagerPort) {\n    throw new XDLError(\n      ErrorCode.NO_PACKAGER_PORT,\n      `No packager found for project at ${projectRoot}.`\n    );\n  }\n}\n\nasync function _getPublishExpConfigAsync(projectRoot, options) {\n  let schema = joi.object().keys({\n    releaseChannel: joi.string(),\n  });\n\n  // Validate schema\n  try {\n    await joiValidateAsync(options, schema);\n    options.releaseChannel = options.releaseChannel || 'default'; // joi default not enforcing this :/\n  } catch (e) {\n    throw new XDLError(ErrorCode.INVALID_OPTIONS, e.toString());\n  }\n\n  // Verify that exp/app.json and package.json exist\n  let { exp, pkg } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n  if (!exp || !pkg) {\n    const configName = await ProjectUtils.configFilenameAsync(projectRoot);\n    throw new XDLError(\n      ErrorCode.NO_PACKAGE_JSON,\n      `Couldn't read ${configName} file in project at ${projectRoot}`\n    );\n  }\n\n  // Support version and name being specified in package.json for legacy\n  // support pre: exp.json\n  if (!exp.version && pkg.version) {\n    exp.version = pkg.version;\n  }\n\n  if (!exp.slug && pkg.name) {\n    exp.slug = pkg.name;\n  }\n\n  if (exp.android && exp.android.config) {\n    delete exp.android.config;\n  }\n\n  if (exp.ios && exp.ios.config) {\n    delete exp.ios.config;\n  }\n\n  // Only allow projects to be published with UNVERSIONED if a correct token is set in env\n  if (exp.sdkVersion === 'UNVERSIONED' && !process.env['EXPO_SKIP_MANIFEST_VALIDATION_TOKEN']) {\n    throw new XDLError(ErrorCode.INVALID_OPTIONS, 'Cannot publish with sdkVersion UNVERSIONED.');\n  }\n\n  return exp;\n}\n\n// Fetch iOS and Android bundles for publishing\nasync function _buildPublishBundlesAsync(projectRoot) {\n  let entryPoint = await Exp.determineEntryPointAsync(projectRoot);\n  let publishUrl = await UrlUtils.constructPublishUrlAsync(projectRoot, entryPoint);\n\n  logger.global.info('Building iOS bundle');\n  let iosBundle = await _getForPlatformAsync(projectRoot, publishUrl, 'ios', {\n    errorCode: ErrorCode.INVALID_BUNDLE,\n    minLength: MINIMUM_BUNDLE_SIZE,\n  });\n\n  logger.global.info('Building Android bundle');\n  let androidBundle = await _getForPlatformAsync(projectRoot, publishUrl, 'android', {\n    errorCode: ErrorCode.INVALID_BUNDLE,\n    minLength: MINIMUM_BUNDLE_SIZE,\n  });\n\n  return { iosBundle, androidBundle };\n}\n\n// note(brentvatne): currently we build source map anytime there is a\n// postPublish hook -- we may have an option in the future to manually\n// enable sourcemap building, but for now it's very fast, most apps in\n// production should use sourcemaps for error reporting, and in the worst\n// case, adding a few seconds to a postPublish hook isn't too annoying\nasync function _maybeBuildSourceMapsAsync(projectRoot, exp, options = {}) {\n  if (!options.force) {\n    return { iosSourceMap: null, androidSourceMap: null };\n  }\n\n  let entryPoint = await Exp.determineEntryPointAsync(projectRoot);\n  let sourceMapUrl = await UrlUtils.constructSourceMapUrlAsync(projectRoot, entryPoint);\n\n  logger.global.info('Building sourcemaps');\n  let iosSourceMap = await _getForPlatformAsync(projectRoot, sourceMapUrl, 'ios', {\n    errorCode: ErrorCode.INVALID_BUNDLE,\n    minLength: MINIMUM_BUNDLE_SIZE,\n  });\n\n  let androidSourceMap = await _getForPlatformAsync(projectRoot, sourceMapUrl, 'android', {\n    errorCode: ErrorCode.INVALID_BUNDLE,\n    minLength: MINIMUM_BUNDLE_SIZE,\n  });\n\n  return { iosSourceMap, androidSourceMap };\n}\n\nasync function _fetchAndUploadAssetsAsync(projectRoot, exp) {\n  logger.global.info('Analyzing assets');\n\n  let entryPoint = await Exp.determineEntryPointAsync(projectRoot);\n  let assetsUrl = await UrlUtils.constructAssetsUrlAsync(projectRoot, entryPoint);\n\n  let iosAssetsJson = await _getForPlatformAsync(projectRoot, assetsUrl, 'ios', {\n    errorCode: ErrorCode.INVALID_ASSETS,\n  });\n\n  let androidAssetsJson = await _getForPlatformAsync(projectRoot, assetsUrl, 'android', {\n    errorCode: ErrorCode.INVALID_ASSETS,\n  });\n\n  // Resolve manifest assets to their S3 URL and add them to the list of assets to\n  // be uploaded\n  const manifestAssets = [];\n  await _resolveManifestAssets(\n    projectRoot,\n    exp,\n    async assetPath => {\n      const absolutePath = path.resolve(projectRoot, assetPath);\n      const contents = await fs.readFile(absolutePath);\n      const hash = md5hex(contents);\n      manifestAssets.push({ files: [absolutePath], fileHashes: [hash] });\n      return 'https://d1wp6m56sqw74a.cloudfront.net/~assets/' + hash;\n    },\n    true\n  );\n\n  logger.global.info('Uploading assets');\n\n  // Upload asset files\n  const iosAssets = JSON.parse(iosAssetsJson);\n  const androidAssets = JSON.parse(androidAssetsJson);\n  const assets = iosAssets.concat(androidAssets).concat(manifestAssets);\n  if (assets.length > 0 && assets[0].fileHashes) {\n    await uploadAssetsAsync(projectRoot, assets);\n  } else {\n    logger.global.info({ quiet: true }, 'No assets to upload, skipped.');\n  }\n\n  // Convert asset patterns to a list of asset strings that match them.\n  // Assets strings are formatted as `asset_<hash>.<type>` and represent\n  // the name that the file will have in the app bundle. The `asset_` prefix is\n  // needed because android doesn't support assets that start with numbers.\n  if (exp.assetBundlePatterns) {\n    const fullPatterns = exp.assetBundlePatterns.map(p => path.join(projectRoot, p));\n    // The assets returned by the RN packager has duplicates so make sure we\n    // only bundle each once.\n    const bundledAssets = new Set();\n    for (const asset of assets) {\n      const file = asset.files && asset.files[0];\n      if (asset.__packager_asset && file && fullPatterns.some(p => minimatch(file, p))) {\n        bundledAssets.add('asset_' + asset.hash + (asset.type ? '.' + asset.type : ''));\n      }\n    }\n    exp.bundledAssets = [...bundledAssets];\n    delete exp.assetBundlePatterns;\n  }\n\n  return exp;\n}\n\nasync function _writeArtifactSafelyAsync(projectRoot, keyName, artifactPath, artifact) {\n  const pathToWrite = path.resolve(projectRoot, artifactPath);\n  if (!fs.existsSync(path.dirname(pathToWrite))) {\n    logger.global.warn(\n      `app.json specifies ${keyName}: ${pathToWrite}, but that directory does not exist.`\n    );\n  } else {\n    await fs.writeFile(pathToWrite, artifact);\n  }\n}\n\nasync function _maybeWriteArtifactsToDiskAsync({\n  exp,\n  projectRoot,\n  iosBundle,\n  androidBundle,\n  iosSourceMap,\n  androidSourceMap,\n}) {\n  if (exp.android && exp.android.publishBundlePath) {\n    await _writeArtifactSafelyAsync(\n      projectRoot,\n      'android.publishBundlePath',\n      exp.android.publishBundlePath,\n      androidBundle\n    );\n  }\n\n  if (exp.ios && exp.ios.publishBundlePath) {\n    await _writeArtifactSafelyAsync(\n      projectRoot,\n      'ios.publishBundlePath',\n      exp.ios.publishBundlePath,\n      iosBundle\n    );\n  }\n\n  if (exp.android && exp.android.publishSourceMapPath) {\n    await _writeArtifactSafelyAsync(\n      projectRoot,\n      'android.publishSourceMapPath',\n      exp.android.publishSourceMapPath,\n      androidSourceMap\n    );\n  }\n\n  if (exp.ios && exp.ios.publishSourceMapPath) {\n    await _writeArtifactSafelyAsync(\n      projectRoot,\n      'ios.publishSourceMapPath',\n      exp.ios.publishSourceMapPath,\n      iosSourceMap\n    );\n  }\n}\n\nasync function _handleKernelPublishedAsync({ projectRoot, user, exp, url }) {\n  let kernelBundleUrl = `${Config.api.scheme}://${Config.api.host}`;\n  if (Config.api.port) {\n    kernelBundleUrl = `${kernelBundleUrl}:${Config.api.port}`;\n  }\n  kernelBundleUrl = `${kernelBundleUrl}/@${user.username}/${exp.slug}/bundle`;\n\n  if (exp.kernel.androidManifestPath) {\n    let manifest = await ExponentTools.getManifestAsync(url, {\n      'Exponent-SDK-Version': exp.sdkVersion,\n      'Exponent-Platform': 'android',\n    });\n    manifest.bundleUrl = kernelBundleUrl;\n    manifest.sdkVersion = 'UNVERSIONED';\n    await fs.writeFile(\n      path.resolve(projectRoot, exp.kernel.androidManifestPath),\n      JSON.stringify(manifest)\n    );\n  }\n\n  if (exp.kernel.iosManifestPath) {\n    let manifest = await ExponentTools.getManifestAsync(url, {\n      'Exponent-SDK-Version': exp.sdkVersion,\n      'Exponent-Platform': 'ios',\n    });\n    manifest.bundleUrl = kernelBundleUrl;\n    manifest.sdkVersion = 'UNVERSIONED';\n    await fs.writeFile(\n      path.resolve(projectRoot, exp.kernel.iosManifestPath),\n      JSON.stringify(manifest)\n    );\n  }\n}\n\n// TODO(jesse): Add analytics for upload\nasync function uploadAssetsAsync(projectRoot, assets) {\n  // Collect paths by key, also effectively handles duplicates in the array\n  const paths = {};\n  assets.forEach(asset => {\n    asset.files.forEach((path, index) => {\n      paths[asset.fileHashes[index]] = path;\n    });\n  });\n\n  // Collect list of assets missing on host\n  const metas = (await Api.callMethodAsync('assetsMetadata', [], 'post', {\n    keys: Object.keys(paths),\n  })).metadata;\n  const missing = Object.keys(paths).filter(key => !metas[key].exists);\n\n  if (missing.length === 0) {\n    logger.global.info({ quiet: true }, `No assets changed, skipped.`);\n  }\n\n  // Upload them!\n  await Promise.all(\n    _.chunk(missing, 5).map(async keys => {\n      let formData = new FormData();\n      for (const key of keys) {\n        ProjectUtils.logDebug(projectRoot, 'expo', `uploading ${paths[key]}`);\n\n        let relativePath = paths[key].replace(projectRoot, '');\n        logger.global.info({ quiet: true }, `Uploading ${relativePath}`);\n\n        formData.append(key, await _readFileForUpload(paths[key]), paths[key]);\n      }\n      await Api.callMethodAsync('uploadAssets', [], 'put', null, { formData });\n    })\n  );\n}\n\nfunction _createBlob(string) {\n  if (isNode()) {\n    return string;\n  } else {\n    return new Blob([string]);\n  }\n}\n\nasync function _readFileForUpload(path) {\n  if (isNode()) {\n    return fs.createReadStream(path);\n  } else {\n    const data = await fs.readFile(path);\n    return new Blob([data]);\n  }\n}\n\nexport async function buildAsync(\n  projectRoot: string,\n  options: {\n    current?: boolean,\n    mode?: string,\n    platform?: string,\n    expIds?: Array<string>,\n    type?: string,\n    releaseChannel?: string,\n  } = {}\n) {\n  await UserManager.ensureLoggedInAsync();\n  _assertValidProjectRoot(projectRoot);\n\n  Analytics.logEvent('Build Shell App', {\n    projectRoot,\n  });\n\n  let schema = joi.object().keys({\n    current: joi.boolean(),\n    mode: joi.string(),\n    platform: joi.any().valid('ios', 'android', 'all'),\n    expIds: joi.array(),\n    type: joi.any().valid('archive', 'simulator'),\n    releaseChannel: joi.string().regex(/[a-z\\d][a-z\\d._-]*/),\n  });\n\n  try {\n    await joiValidateAsync(options, schema);\n  } catch (e) {\n    throw new XDLError(ErrorCode.INVALID_OPTIONS, e.toString());\n  }\n\n  let { exp, pkg } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n  const configName = await ProjectUtils.configFilenameAsync(projectRoot);\n  const configPrefix = configName === 'app.json' ? 'expo.' : '';\n\n  if (!exp || !pkg) {\n    throw new XDLError(\n      ErrorCode.NO_PACKAGE_JSON,\n      `Couldn't read ${configName} file in project at ${projectRoot}`\n    );\n  }\n\n  // Support version and name being specified in package.json for legacy\n  // support pre: exp.json\n  if (!exp.version && pkg.version) {\n    exp.version = pkg.version;\n  }\n  if (!exp.slug && pkg.name) {\n    exp.slug = pkg.name;\n  }\n\n  if (options.platform === 'ios' || options.platform === 'all') {\n    if (!exp.ios || !exp.ios.bundleIdentifier) {\n      throw new XDLError(\n        ErrorCode.INVALID_MANIFEST,\n        `Must specify a bundle identifier in order to build this experience for iOS. Please specify one in ${configName} at \"${configPrefix}ios.bundleIdentifier\"`\n      );\n    }\n  }\n\n  if (options.platform === 'android' || options.platform === 'all') {\n    if (!exp.android || !exp.android.package) {\n      throw new XDLError(\n        ErrorCode.INVALID_MANIFEST,\n        `Must specify a java package in order to build this experience for Android. Please specify one in ${configName} at \"${configPrefix}android.package\"`\n      );\n    }\n  }\n\n  let response = await Api.callMethodAsync('build', [], 'put', {\n    manifest: exp,\n    options,\n  });\n\n  return response;\n}\n\nasync function _waitForRunningAsync(url) {\n  try {\n    let response = await request(url);\n    // Looking for \"Cached Bundles\" string is hacky, but unfortunately\n    // ngrok returns a 200 when it succeeds but the port it's proxying\n    // isn't bound.\n    if (\n      response.statusCode >= 200 &&\n      response.statusCode < 300 &&\n      response.body &&\n      response.body.includes('packager-status:running')\n    ) {\n      return true;\n    }\n  } catch (e) {\n    // Try again after delay\n  }\n\n  await delayAsync(100);\n  return _waitForRunningAsync(url);\n}\n\nfunction _stripPackagerOutputBox(output: string) {\n  let re = /Running packager on port (\\d+)/;\n  let found = output.match(re);\n  if (found && found.length >= 2) {\n    return `Running packager on port ${found[1]}\\n`;\n  } else {\n    return null;\n  }\n}\n\nfunction _processPackagerLine(line: string) {\n  // [10:02:59 AM]\n  let timestampRe = /\\s*\\[\\d+\\:\\d+\\:\\d+\\ (AM)?(PM)?\\]\\s+/;\n  // [11/8/2016, 10:02:59 AM]\n  let sdk11AndUpTimestampRe = /\\s*\\[\\d+\\/\\d+\\/\\d+, \\d+\\:\\d+\\:\\d+\\ (AM)?(PM)?\\]\\s+/;\n  return line.replace(timestampRe, '').replace(sdk11AndUpTimestampRe, '');\n}\n\nasync function _restartWatchmanAsync(projectRoot: string) {\n  try {\n    let result = await spawnAsync('watchman', ['watch-del', projectRoot]);\n    await spawnAsync('watchman', ['watch-project', projectRoot]);\n    if (result.stdout.includes('root')) {\n      ProjectUtils.logInfo(projectRoot, 'expo', 'Restarted watchman.');\n      return;\n    }\n  } catch (e) {}\n\n  ProjectUtils.logError(\n    projectRoot,\n    'expo',\n    'Attempted to restart watchman but failed. Please try running `watchman watch-del-all`.'\n  );\n}\n\nfunction _parseModuleResolutionError(projectRoot: string, errorMessage: string) {\n  let parts = errorMessage.split(' from ');\n  let moduleName = parts[0]\n    .replace(/.*?Unable to resolve module /, '')\n    .replace(/`/g, '')\n    .trim();\n  let path = parts[1]\n    .replace(/`: Module .*/, '')\n    .replace(/`/, '')\n    .trim();\n  let relativePath = path.replace(projectRoot, '').trim();\n\n  return {\n    moduleName,\n    relativePath,\n    path,\n  };\n}\n\nconst NODE_STDLIB_MODULES = [\n  'assert',\n  'async_hooks',\n  'buffer',\n  'child_process',\n  'cluster',\n  'crypto',\n  'dgram',\n  'dns',\n  'domain',\n  'events',\n  'fs',\n  'http',\n  'https',\n  'net',\n  'os',\n  'path',\n  'punycode',\n  'querystring',\n  'readline',\n  'repl',\n  'stream',\n  'string_decoder',\n  'tls',\n  'tty',\n  'url',\n  'util',\n  'v8',\n  'vm',\n  'zlib',\n];\n\nfunction _logModuleResolutionError(projectRoot: string, errorMessage: string) {\n  let { moduleName, relativePath, path } = _parseModuleResolutionError(projectRoot, errorMessage);\n\n  const DOCS_PAGE_URL =\n    'https://docs.expo.io/versions/latest/introduction/faq.html#can-i-use-nodejs-packages-with-expo';\n\n  if (NODE_STDLIB_MODULES.includes(moduleName)) {\n    if (path.includes('node_modules')) {\n      ProjectUtils.logError(\n        projectRoot,\n        'packager',\n        `The package at \".${relativePath}\" attempted to import the Node standard library module \"${moduleName}\". It failed because React Native does not include the Node standard library. Read more at ${DOCS_PAGE_URL}`\n      );\n    } else {\n      ProjectUtils.logError(\n        projectRoot,\n        'packager',\n        `You attempted attempted to import the Node standard library module \"${moduleName}\" from \".${relativePath}\". It failed because React Native does not include the Node standard library. Read more at ${DOCS_PAGE_URL}`\n      );\n    }\n  } else {\n    ProjectUtils.logError(\n      projectRoot,\n      'packager',\n      `Unable to resolve ${moduleName}\" from \"./${relativePath}\"`\n    );\n  }\n}\n\nfunction _logPackagerOutput(projectRoot: string, level: string, data: Object) {\n  let output = data.toString();\n  if (output.includes('─────')) {\n    output = _stripPackagerOutputBox(output);\n    if (output) {\n      ProjectUtils.logInfo(projectRoot, 'expo', output);\n    }\n    return;\n  }\n  if (!output) {\n    return;\n  } // Fix watchman if it's being dumb\n  if (Watchman.isPlatformSupported() && output.includes('watchman watch-del')) {\n    // Skip this as it is likely no longer needed. We may want to add a message\n    // in this place in the event that there are still issues reported that could\n    // be resolved by restarting watchman when the log output includes this message.\n    // _restartWatchmanAsync(projectRoot);\n    return;\n  }\n\n  if (output.includes('Unable to resolve module')) {\n    _logModuleResolutionError(projectRoot, output);\n  }\n\n  // Temporarily hide warnings about duplicate providesModule declarations\n  // under react-native\n  if (_isIgnorableDuplicateModuleWarning(projectRoot, level, output)) {\n    ProjectUtils.logDebug(\n      projectRoot,\n      'expo',\n      `Suppressing @providesModule warning: ${output}`,\n      'project-suppress-providesmodule-warning'\n    );\n    return;\n  }\n  let lines = output.split(/\\r?\\n/);\n  for (let i = 0; i < lines.length; i++) {\n    lines[i] = _processPackagerLine(lines[i]);\n  }\n  output = lines.join('\\n');\n  if (level === 'info') {\n    ProjectUtils.logInfo(projectRoot, 'packager', output);\n  } else {\n    ProjectUtils.logError(projectRoot, 'packager', output);\n  }\n}\n\nfunction _isIgnorableDuplicateModuleWarning(\n  projectRoot: string,\n  level: string,\n  output: string\n): boolean {\n  if (\n    level !== 'error' ||\n    !output.startsWith('jest-haste-map: @providesModule naming collision:')\n  ) {\n    return false;\n  }\n\n  let reactNativeNodeModulesPath = path.join(\n    projectRoot,\n    'node_modules',\n    'react-native',\n    'node_modules'\n  );\n  let reactNativeNodeModulesPattern = _.escapeRegExp(reactNativeNodeModulesPath);\n  let reactNativeNodeModulesCollisionRegex = new RegExp(\n    `Paths: ${reactNativeNodeModulesPattern}.+ collides with ${reactNativeNodeModulesPattern}.+`\n  );\n  return reactNativeNodeModulesCollisionRegex.test(output);\n}\n\nfunction _handleDeviceLogs(projectRoot: string, deviceId: string, deviceName: string, logs: any) {\n  for (let i = 0; i < logs.length; i++) {\n    let log = logs[i];\n    let body = typeof log.body === 'string' ? [log.body] : log.body;\n    let string = body\n      .map(obj => {\n        if (typeof obj === 'undefined') {\n          return 'undefined';\n        }\n        if (obj === 'null') {\n          return 'null';\n        }\n        if (typeof obj === 'string' || typeof obj === 'number' || typeof obj === 'boolean') {\n          return obj;\n        }\n        try {\n          return JSON.stringify(obj);\n        } catch (e) {\n          return obj.toString();\n        }\n      })\n      .join(' ');\n    let level = log.level;\n    let groupDepth = log.groupDepth;\n    let shouldHide = log.shouldHide;\n    let includesStack = log.includesStack;\n\n    ProjectUtils.logWithLevel(\n      projectRoot,\n      level,\n      {\n        tag: 'device',\n        deviceId,\n        deviceName,\n        groupDepth,\n        shouldHide,\n        includesStack,\n      },\n      string\n    );\n  }\n}\nexport async function startReactNativeServerAsync(\n  projectRoot: string,\n  options: Object = {},\n  verbose: boolean = true\n) {\n  await UserManager.ensureLoggedInAsync();\n  _assertValidProjectRoot(projectRoot);\n  await stopReactNativeServerAsync(projectRoot);\n  await Watchman.addToPathAsync(); // Attempt to fix watchman if it's hanging\n  await Watchman.unblockAndGetVersionAsync(projectRoot);\n\n  let { exp } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n\n  let packagerPort = await _getFreePortAsync(19001); // Create packager options\n  let nodeModulesPath = exp.nodeModulesPath\n    ? path.join(path.resolve(projectRoot, exp.nodeModulesPath), 'node_modules')\n    : path.join(projectRoot, 'node_modules');\n  let packagerOpts = {\n    port: packagerPort,\n    customLogReporterPath: path.join(nodeModulesPath, 'expo', 'tools', 'LogReporter'),\n    assetExts: ['ttf'],\n    nonPersistent: !!options.nonPersistent,\n  };\n\n  if (!Versions.gteSdkVersion(exp, '16.0.0')) {\n    delete packagerOpts.customLogReporterPath;\n  }\n  const userPackagerOpts = _.get(exp, 'packagerOpts');\n  if (userPackagerOpts) {\n    // The RN CLI expects rn-cli.config.js's path to be absolute. We use the\n    // project root to resolve relative paths since that was the original\n    // behavior of the RN CLI.\n    if (userPackagerOpts.config) {\n      userPackagerOpts.config = path.resolve(projectRoot, userPackagerOpts.config);\n    }\n\n    packagerOpts = {\n      ...packagerOpts,\n      ...userPackagerOpts,\n      ...(userPackagerOpts.assetExts\n        ? {\n            assetExts: _.uniq([...packagerOpts.assetExts, ...userPackagerOpts.assetExts]),\n          }\n        : {}),\n    };\n  }\n  let cliOpts = _.reduce(\n    packagerOpts,\n    (opts, val, key) => {\n      // If the packager opt value is boolean, don't set\n      // --[opt] [value], just set '--opt'\n      if (val && typeof val === 'boolean') {\n        opts.push(`--${key}`);\n      } else if (val) {\n        opts.push(`--${key}`, val);\n      }\n      return opts;\n    },\n    ['start']\n  );\n  if (options.reset) {\n    cliOpts.push('--reset-cache');\n  } // Get custom CLI path from project package.json, but fall back to node_module path\n  let defaultCliPath = path.join(\n    projectRoot,\n    'node_modules',\n    'react-native',\n    'local-cli',\n    'cli.js'\n  );\n  const cliPath = _.get(exp, 'rnCliPath', defaultCliPath);\n  let nodePath; // When using a custom path for the RN CLI, we want it to use the project // root to look up config files and Node modules\n  if (exp.rnCliPath) {\n    nodePath = _nodePathForProjectRoot(projectRoot);\n  } else {\n    nodePath = null;\n  }\n  ProjectUtils.logInfo(projectRoot, 'expo', 'Starting React Native packager...'); // Run the copy of Node that's embedded in Electron by setting the // ELECTRON_RUN_AS_NODE environment variable // Note: the CLI script sets up graceful-fs and sets ulimit to 4096 in the // child process\n  let packagerProcess = child_process.fork(cliPath, cliOpts, {\n    cwd: projectRoot,\n    env: {\n      ...process.env,\n      REACT_NATIVE_APP_ROOT: projectRoot,\n      NODE_PATH: nodePath,\n      ELECTRON_RUN_AS_NODE: 1,\n    },\n    silent: true,\n  });\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    packagerPort,\n    packagerPid: packagerProcess.pid,\n  }); // TODO: do we need this? don't know if it's ever called\n  process.on('exit', () => {\n    treekill(packagerProcess.pid);\n  });\n  packagerProcess.stdout.setEncoding('utf8');\n  packagerProcess.stderr.setEncoding('utf8');\n  packagerProcess.stdout.pipe(split()).on('data', data => {\n    if (verbose) {\n      _logPackagerOutput(projectRoot, 'info', data);\n    }\n  });\n  packagerProcess.stderr.on('data', data => {\n    if (verbose) {\n      _logPackagerOutput(projectRoot, 'error', data);\n    }\n  });\n  packagerProcess.on('exit', async code => {\n    ProjectUtils.logDebug(projectRoot, 'expo', `packager process exited with code ${code}`);\n  });\n  let packagerUrl = await UrlUtils.constructBundleUrlAsync(projectRoot, {\n    urlType: 'http',\n    hostType: 'localhost',\n  });\n  await _waitForRunningAsync(`${packagerUrl}/status`);\n} // Simulate the node_modules resolution // If you project dir is /Jesse/Expo/Universe/BubbleBounce, returns // \"/Jesse/node_modules:/Jesse/Expo/node_modules:/Jesse/Expo/Universe/node_modules:/Jesse/Expo/Universe/BubbleBounce/node_modules\"\nfunction _nodePathForProjectRoot(projectRoot: string): string {\n  let paths = [];\n  let directory = path.resolve(projectRoot);\n  while (true) {\n    paths.push(path.join(directory, 'node_modules'));\n    let parentDirectory = path.dirname(directory);\n    if (directory === parentDirectory) {\n      break;\n    }\n    directory = parentDirectory;\n  }\n  return paths.join(path.delimiter);\n}\nexport async function stopReactNativeServerAsync(projectRoot: string) {\n  await UserManager.ensureLoggedInAsync();\n  _assertValidProjectRoot(projectRoot);\n  let packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  if (!packagerInfo.packagerPort || !packagerInfo.packagerPid) {\n    ProjectUtils.logDebug(projectRoot, 'expo', `No packager found for project at ${projectRoot}.`);\n    return;\n  }\n  ProjectUtils.logDebug(\n    projectRoot,\n    'expo',\n    `Killing packager process tree: ${packagerInfo.packagerPid}`\n  );\n  try {\n    await treekillAsync(packagerInfo.packagerPid, 'SIGKILL');\n  } catch (e) {\n    ProjectUtils.logDebug(projectRoot, 'expo', `Error stopping packager process: ${e.toString()}`);\n  }\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    packagerPort: null,\n    packagerPid: null,\n  });\n}\nexport async function startExpoServerAsync(projectRoot: string) {\n  await UserManager.ensureLoggedInAsync();\n  _assertValidProjectRoot(projectRoot);\n  await stopExpoServerAsync(projectRoot);\n  let app = express();\n  app.use(\n    bodyParser.json({\n      limit: '10mb',\n    })\n  );\n  app.use(\n    bodyParser.urlencoded({\n      limit: '10mb',\n      extended: true,\n    })\n  );\n  if ((await Doctor.validateWithNetworkAsync(projectRoot)) === Doctor.FATAL) {\n    throw new Error(`Couldn't start project. Please fix the errors and restart the project.`);\n  } // Serve the manifest.\n  let manifestHandler = async (req, res) => {\n    try {\n      // We intentionally don't `await`. We want to continue trying even\n      // if there is a potential error in the package.json and don't want to slow\n      // down the request\n      Doctor.validateWithNetworkAsync(projectRoot);\n      let { exp: manifest } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n      if (!manifest) {\n        const configName = await ProjectUtils.configFilenameAsync(projectRoot);\n        throw new Error(`No ${configName} file found`);\n      } // Get packager opts and then copy into bundleUrlPackagerOpts\n      let packagerOpts = await ProjectSettings.getPackagerOptsAsync(projectRoot);\n      let bundleUrlPackagerOpts = JSON.parse(JSON.stringify(packagerOpts));\n      bundleUrlPackagerOpts.urlType = 'http';\n      if (bundleUrlPackagerOpts.hostType === 'redirect') {\n        bundleUrlPackagerOpts.hostType = 'tunnel';\n      }\n      manifest.xde = true; // deprecated\n      manifest.developer = {\n        tool: Config.developerTool,\n        projectRoot,\n      };\n      manifest.packagerOpts = packagerOpts;\n      manifest.env = {};\n      for (let key of Object.keys(process.env)) {\n        if (key.startsWith('REACT_NATIVE_') || key.startsWith('EXPO_')) {\n          manifest.env[key] = process.env[key];\n        }\n      }\n      let entryPoint = await Exp.determineEntryPointAsync(projectRoot);\n      let platform = req.headers['exponent-platform'] || 'ios';\n      entryPoint = UrlUtils.getPlatformSpecificBundleUrl(entryPoint, platform);\n      let mainModuleName = UrlUtils.guessMainModulePath(entryPoint);\n      let queryParams = await UrlUtils.constructBundleQueryParamsAsync(\n        projectRoot,\n        packagerOpts,\n        req.hostname\n      );\n      let path = `/${mainModuleName}.bundle?platform=${platform}&${queryParams}`;\n      manifest.bundleUrl =\n        (await UrlUtils.constructBundleUrlAsync(projectRoot, bundleUrlPackagerOpts, req.hostname)) +\n        path;\n      manifest.debuggerHost = await UrlUtils.constructDebuggerHostAsync(projectRoot, req.hostname);\n      manifest.mainModuleName = mainModuleName;\n      manifest.logUrl = await UrlUtils.constructLogUrlAsync(projectRoot, req.hostname);\n      await _resolveManifestAssets(\n        projectRoot,\n        manifest,\n        async path => manifest.bundleUrl.match(/^https?:\\/\\/.*?\\//)[0] + 'assets/' + path\n      ); // the server normally inserts this but if we're offline we'll do it here\n      const hostUUID = await UserSettings.anonymousIdentifier();\n      if (Config.offline) {\n        manifest.id = `@anonymous/${manifest.slug}-${hostUUID}`;\n      }\n      let manifestString = JSON.stringify(manifest);\n      let currentUser;\n      if (!Config.offline) {\n        currentUser = await UserManager.getCurrentUserAsync();\n      }\n      if (req.headers['exponent-accept-signature'] && (currentUser || Config.offline)) {\n        if (_cachedSignedManifest.manifestString === manifestString) {\n          manifestString = _cachedSignedManifest.signedManifest;\n        } else {\n          if (Config.offline) {\n            const unsignedManifest = {\n              manifestString,\n              signature: 'UNSIGNED',\n            };\n            _cachedSignedManifest.manifestString = manifestString;\n            manifestString = JSON.stringify(unsignedManifest);\n            _cachedSignedManifest.signedManifest = manifestString;\n          } else {\n            let publishInfo = await Exp.getPublishInfoAsync(projectRoot);\n            let signedManifest = await Api.callMethodAsync(\n              'signManifest',\n              [publishInfo.args],\n              'post',\n              manifest\n            );\n            _cachedSignedManifest.manifestString = manifestString;\n            _cachedSignedManifest.signedManifest = signedManifest.response;\n            manifestString = signedManifest.response;\n          }\n        }\n      }\n      const hostInfo = {\n        host: hostUUID,\n        server: 'xdl',\n        serverVersion: require('../package.json').version,\n        serverDriver: Config.developerTool,\n        serverOS: os.platform(),\n        serverOSVersion: os.release(),\n      };\n      res.append('Exponent-Server', JSON.stringify(hostInfo));\n      res.send(manifestString);\n      Analytics.logEvent('Serve Manifest', {\n        projectRoot,\n      });\n    } catch (e) {\n      ProjectUtils.logDebug(projectRoot, 'expo', `Error in manifestHandler: ${e} ${e.stack}`); // 5xx = Server Error HTTP code\n      res.status(520).send({\n        error: e.toString(),\n      });\n    }\n  };\n  app.get('/', manifestHandler);\n  app.get('/manifest', manifestHandler);\n  app.get('/index.exp', manifestHandler);\n  app.post('/logs', async (req, res) => {\n    try {\n      let deviceId = req.get('Device-Id');\n      let deviceName = req.get('Device-Name');\n      if (deviceId && deviceName && req.body) {\n        _handleDeviceLogs(projectRoot, deviceId, deviceName, req.body);\n      }\n    } catch (e) {\n      ProjectUtils.logError(projectRoot, 'expo', `Error getting device logs: ${e} ${e.stack}`);\n    }\n    res.send('Success');\n  });\n  app.post('/shutdown', async (req, res) => {\n    server.close();\n    res.send('Success');\n  });\n  let expRc = await ProjectUtils.readExpRcAsync(projectRoot);\n  let expoServerPort = expRc.manifestPort ? expRc.manifestPort : await _getFreePortAsync(19000);\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    expoServerPort,\n  });\n  let server = app.listen(expoServerPort, () => {\n    let host = server.address().address;\n    let port = server.address().port;\n    ProjectUtils.logDebug(projectRoot, 'expo', `Local server listening at http://${host}:${port}`);\n  });\n  await Exp.saveRecentExpRootAsync(projectRoot);\n}\nexport async function stopExpoServerAsync(projectRoot: string) {\n  await UserManager.ensureLoggedInAsync();\n  _assertValidProjectRoot(projectRoot);\n  let packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  if (packagerInfo && packagerInfo.expoServerPort) {\n    try {\n      await request.post(`http://localhost:${packagerInfo.expoServerPort}/shutdown`);\n    } catch (e) {}\n  }\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    expoServerPort: null,\n  });\n}\nasync function _connectToNgrokAsync(\n  projectRoot: string,\n  args: mixed,\n  hostnameAsync: Function,\n  ngrokPid: ?number,\n  attempts: number = 0\n) {\n  try {\n    let configPath = path.join(UserSettings.dotExpoHomeDirectory(), 'ngrok.yml');\n    let hostname = await hostnameAsync();\n    let url = await ngrokConnectAsync({\n      hostname,\n      configPath,\n      ...args,\n    });\n    return url;\n  } catch (e) {\n    // Attempt to connect 3 times\n    if (attempts >= 2) {\n      if (e.message) {\n        throw new XDLError(ErrorCode.NGROK_ERROR, e.toString());\n      } else {\n        throw new XDLError(ErrorCode.NGROK_ERROR, JSON.stringify(e));\n      }\n    }\n    if (!attempts) {\n      attempts = 0;\n    } // Attempt to fix the issue\n    if (e.error_code && e.error_code === 103) {\n      if (attempts === 0) {\n        // Failed to start tunnel. Might be because url already bound to another session.\n        if (ngrokPid) {\n          try {\n            process.kill(ngrokPid, 'SIGKILL');\n          } catch (e) {\n            ProjectUtils.logDebug(projectRoot, 'expo', `Couldn't kill ngrok with PID ${ngrokPid}`);\n          }\n        } else {\n          await ngrokKillAsync();\n        }\n      } else {\n        // Change randomness to avoid conflict if killing ngrok didn't help\n        await Exp.resetProjectRandomnessAsync(projectRoot);\n      }\n    } // Wait 100ms and then try again\n    await delayAsync(100);\n    return _connectToNgrokAsync(projectRoot, args, hostnameAsync, null, attempts + 1);\n  }\n}\n\nexport async function startTunnelsAsync(projectRoot: string) {\n  const user = await UserManager.ensureLoggedInAsync();\n  if (!user) {\n    throw new Error('Internal error -- tunnel started in offline mode.');\n  }\n  _assertValidProjectRoot(projectRoot);\n  let packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  if (!packagerInfo.packagerPort) {\n    throw new XDLError(\n      ErrorCode.NO_PACKAGER_PORT,\n      `No packager found for project at ${projectRoot}.`\n    );\n  }\n  if (!packagerInfo.expoServerPort) {\n    throw new XDLError(\n      ErrorCode.NO_EXPO_SERVER_PORT,\n      `No Expo server found for project at ${projectRoot}.`\n    );\n  }\n  await stopTunnelsAsync(projectRoot);\n  if (await Android.startAdbReverseAsync(projectRoot)) {\n    ProjectUtils.logInfo(\n      projectRoot,\n      'expo',\n      'Successfully ran `adb reverse`. Localhost urls should work on the connected Android device.',\n      'project-adb-reverse'\n    );\n  } else {\n    ProjectUtils.clearNotification(projectRoot, 'project-adb-reverse');\n  }\n  const { username } = user;\n  let packageShortName = path.parse(projectRoot).base;\n  let expRc = await ProjectUtils.readExpRcAsync(projectRoot);\n\n  ngrok.addListener('statuschange', status => {\n    if (status === 'reconnecting') {\n      ProjectUtils.logError(\n        projectRoot,\n        'expo',\n        'We noticed your tunnel is having issues. This may be due to intermittent problems with our tunnel provider. If you have trouble connecting to your app, try to Restart the project, or switch Host to LAN.'\n      );\n    } else if (status === 'online') {\n      ProjectUtils.logInfo(projectRoot, 'expo', 'Tunnel connected.');\n    }\n  });\n\n  try {\n    let startedTunnelsSuccessfully = false;\n\n    // Some issues with ngrok cause it to hang indefinitely. After\n    // TUNNEL_TIMEOUTms we just throw an error.\n    await Promise.race([\n      (async () => {\n        await delayAsync(TUNNEL_TIMEOUT);\n        if (!startedTunnelsSuccessfully) {\n          throw new Error('Starting tunnels timed out');\n        }\n      })(),\n      (async () => {\n        let expoServerNgrokUrl = await _connectToNgrokAsync(\n          projectRoot,\n          {\n            authtoken: Config.ngrok.authToken,\n            port: packagerInfo.expoServerPort,\n            proto: 'http',\n          },\n          async () => {\n            let randomness = expRc.manifestTunnelRandomness\n              ? expRc.manifestTunnelRandomness\n              : await Exp.getProjectRandomnessAsync(projectRoot);\n            return [\n              randomness,\n              UrlUtils.domainify(username),\n              UrlUtils.domainify(packageShortName),\n              Config.ngrok.domain,\n            ].join('.');\n          },\n          packagerInfo.ngrokPid\n        );\n        let packagerNgrokUrl = await _connectToNgrokAsync(\n          projectRoot,\n          {\n            authtoken: Config.ngrok.authToken,\n            port: packagerInfo.packagerPort,\n            proto: 'http',\n          },\n          async () => {\n            let randomness = expRc.manifestTunnelRandomness\n              ? expRc.manifestTunnelRandomness\n              : await Exp.getProjectRandomnessAsync(projectRoot);\n            return [\n              'packager',\n              randomness,\n              UrlUtils.domainify(username),\n              UrlUtils.domainify(packageShortName),\n              Config.ngrok.domain,\n            ].join('.');\n          },\n          packagerInfo.ngrokPid\n        );\n        await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n          expoServerNgrokUrl,\n          packagerNgrokUrl,\n          ngrokPid: ngrok.process().pid,\n        });\n\n        startedTunnelsSuccessfully = true;\n      })(),\n    ]);\n  } catch (e) {\n    ProjectUtils.logError(projectRoot, 'expo', `Error starting tunnel: ${e.toString()}`);\n    throw e;\n  }\n}\nexport async function stopTunnelsAsync(projectRoot: string) {\n  await UserManager.ensureLoggedInAsync();\n  _assertValidProjectRoot(projectRoot); // This will kill all ngrok tunnels in the process. // We'll need to change this if we ever support more than one project // open at a time in XDE.\n  let packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  let ngrokProcess = ngrok.process();\n  let ngrokProcessPid = ngrokProcess ? ngrokProcess.pid : null;\n  ngrok.removeAllListeners('statuschange');\n  if (packagerInfo.ngrokPid && packagerInfo.ngrokPid !== ngrokProcessPid) {\n    // Ngrok is running in some other process. Kill at the os level.\n    try {\n      process.kill(packagerInfo.ngrokPid);\n    } catch (e) {\n      ProjectUtils.logDebug(\n        projectRoot,\n        'expo',\n        `Couldn't kill ngrok with PID ${packagerInfo.ngrokPid}`\n      );\n    }\n  } else {\n    // Ngrok is running from the current process. Kill using ngrok api.\n    await ngrokKillAsync();\n  }\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    expoServerNgrokUrl: null,\n    packagerNgrokUrl: null,\n    ngrokPid: null,\n  });\n  await Android.stopAdbReverseAsync(projectRoot);\n}\n\nexport async function setOptionsAsync(\n  projectRoot: string,\n  options: {\n    packagerPort?: number,\n  }\n) {\n  await UserManager.ensureLoggedInAsync();\n  _assertValidProjectRoot(projectRoot); // Check to make sure all options are valid\n  let schema = joi.object().keys({\n    packagerPort: joi.number().integer(),\n  });\n  try {\n    await joiValidateAsync(options, schema);\n  } catch (e) {\n    throw new XDLError(ErrorCode.INVALID_OPTIONS, e.toString());\n  }\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, options);\n}\nexport async function getUrlAsync(projectRoot: string, options: Object = {}) {\n  await UserManager.ensureLoggedInAsync();\n  _assertValidProjectRoot(projectRoot);\n  return await UrlUtils.constructManifestUrlAsync(projectRoot, options);\n}\n\nexport async function startAsync(\n  projectRoot: string,\n  options: Object = {},\n  verbose: boolean = true\n): Promise<any> {\n  await UserManager.ensureLoggedInAsync();\n  _assertValidProjectRoot(projectRoot);\n  Analytics.logEvent('Start Project', {\n    projectRoot,\n  });\n  await startExpoServerAsync(projectRoot);\n  await startReactNativeServerAsync(projectRoot, options, verbose);\n  if (!Config.offline) {\n    try {\n      await startTunnelsAsync(projectRoot);\n    } catch (e) {\n      ProjectUtils.logDebug(projectRoot, 'expo', `Error starting ngrok ${e.message}`);\n    }\n  }\n  let { exp } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n  return exp;\n}\nasync function _stopInternalAsync(projectRoot: string): Promise<void> {\n  await stopExpoServerAsync(projectRoot);\n  await stopReactNativeServerAsync(projectRoot);\n  if (!Config.offline) {\n    try {\n      await stopTunnelsAsync(projectRoot);\n    } catch (e) {\n      ProjectUtils.logDebug(projectRoot, 'expo', `Error stopping ngrok ${e.message}`);\n    }\n  }\n}\nexport async function stopAsync(projectDir: string): Promise<void> {\n  const result = await Promise.race([\n    _stopInternalAsync(projectDir),\n    new Promise((resolve, reject) => setTimeout(resolve, 2000, 'stopFailed')),\n  ]);\n  if (result === 'stopFailed') {\n    // find RN packager and ngrok pids, attempt to kill them manually\n    const { packagerPid, ngrokPid } = await ProjectSettings.readPackagerInfoAsync(projectDir);\n    if (packagerPid) {\n      try {\n        process.kill(packagerPid);\n      } catch (e) {}\n    }\n    if (ngrokPid) {\n      try {\n        process.kill(ngrokPid);\n      } catch (e) {}\n    }\n    await ProjectSettings.setPackagerInfoAsync(projectDir, {\n      expoServerPort: null,\n      packagerPort: null,\n      packagerPid: null,\n      expoServerNgrokUrl: null,\n      packagerNgrokUrl: null,\n      ngrokPid: null,\n    });\n  }\n}\n"],"sourceRoot":"/xdl/src"}